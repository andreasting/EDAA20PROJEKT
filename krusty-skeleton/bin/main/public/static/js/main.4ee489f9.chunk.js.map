{"version":3,"sources":["theme.js","PalletProduction.js","PalletTableFilter.js","PalletTable.js","ResetDatabase.js","App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","primary","main","secondary","error","red","A400","background","default","PalletProduction","state","cookie","handleInputChange","e","setState","target","name","value","handleSubmit","preventDefault","isFormValid","params","axios","post","then","res","console","log","data","id","message","props","setStatus","alert","status","refresh","catch","length","Paper","className","this","classes","PalletProductionPaper","Typography","color","variant","gutterBottom","Grid","container","direction","justify","alignItems","TextField","style","minWidth","select","label","onChange","SelectProps","native","cookies","map","c","key","Button","marginLeft","onClick","disabled","Component","withStyles","padding","marginBottom","PalletTableFilter","from","to","blocked","palletsFilter","handleClear","paddingLeft","marginTop","type","InputLabelProps","shrink","root","width","overflowX","table","header","Table","TableHead","TableRow","TableCell","TableBody","pallets","p","customer","component","scope","production_date","ResetDatabase","open","openDialog","closeDialog","resetDatabase","response","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","App","disconnected","cookieStatus","palletStatus","fetchCookies","fetchPallets","get","filter","Object","keys","k","forEach","setPalletsFilter","mainArea","statusMessage","join","defaults","baseURL","StatusPaper","Boolean","window","location","hostname","match","ReactDOM","render","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4ee489f9.chunk.js","sourcesContent":["import { red } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#556cd6',\n    },\n    secondary: {\n      main: '#19857b',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#fff',\n    },\n  },\n});\n\nexport default theme;","import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\n\nclass PalletProduction extends Component {\n  state = {\n    cookie: \"\",\n  }\n\n  handleInputChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    if (this.isFormValid()) {\n      const cookie = this.state.cookie\n      const params = {cookie: cookie}\n      axios.post('pallets', null, {params: params})\n        .then(res => {\n          console.log(res);\n          if (res.data.id) {\n            const message = \"A pallet of \" + cookie\n              + \" was produced with id \" + res.data.id;\n            this.props.setStatus(message)\n          } else {\n            alert('An error occured: ' + res.data.status\n              + '. See console for more info.');\n          }\n          this.props.refresh();\n        })\n        .catch(error => {\n          alert('An error occured. See console for more info.');\n          console.log(error);\n        });\n      this.setState({cookie: \"\"});\n    }\n  }\n\n  isFormValid = () => this.state.cookie.length > 0;\n\n  render() {\n    return (\n      <Paper className={this.props.classes.PalletProductionPaper}>\n        <Typography color=\"textSecondary\" variant=\"button\" gutterBottom>\n          Production\n        </Typography>\n        <form>\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"flex-start\"\n            alignItems=\"flex-end\">\n            <TextField\n              style={{minWidth: \"140px\"}}\n              id=\"cookie\"\n              select\n              label=\"Select Cookie\"\n              value={this.state.cookie}\n              onChange={this.handleInputChange}\n              name=\"cookie\"\n              SelectProps={{\n                native: true\n              }}>\n              <option value=\"\"></option>\n              {this.props.cookies.map(c =>\n                <option key={c.name} value={c.name}>{c.name}</option>\n              )}\n            </TextField>\n            <Button\n                style={{marginLeft: \"10px\"}}\n                variant=\"contained\"\n                onClick={this.handleSubmit}\n                disabled={!this.isFormValid()}>\n              Produce pallet!\n            </Button>\n          </Grid>\n        </form>\n      </Paper>\n    );\n  }\n}\n\nconst styles = theme => ({\n  PalletProductionPaper: {\n    padding: \"10px\",\n    marginBottom: \"15px\"\n  }\n});\n\nexport default withStyles(styles)(PalletProduction);\n","import React, { Component } from 'react';\n\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\n\nconst initialState = () => ({\n  cookie: \"\",\n  from: \"\",\n  to: \"\",\n  blocked: \"\"\n})\n\nclass PalletTableFilter extends Component {\n  state = initialState()\n\n  handleInputChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  handleSubmit = () => {\n    this.props.palletsFilter(this.state);\n  }\n\n  handleClear = () => {\n    this.setState(initialState());\n    this.props.palletsFilter({ });\n  }\n\n  render() {\n    return (\n      <form style={{paddingLeft: \"10px\", marginBottom: \"10px\", marginTop:\"5px\"}}>\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"flex-start\"\n          alignItems=\"flex-end\">\n          <TextField\n            style={{minWidth: \"140px\"}}\n            id=\"cookie\"\n            select\n            label=\"Select Cookie\"\n            value={this.state.cookie}\n            onChange={this.handleInputChange}\n            name=\"cookie\"\n            SelectProps={{\n              native: true\n            }}>\n            <option value=\"\"></option>\n            {this.props.cookies.map(c =>\n              <option key={c.name} value={c.name}>{c.name}</option>\n            )}\n          </TextField>\n          <TextField\n            style={{marginLeft: \"10px\"}}\n            id=\"from\"\n            label=\"From\"\n            type=\"date\"\n            value={this.state.from}\n            onChange={this.handleInputChange}\n            name=\"from\"\n            InputLabelProps={{\n              shrink: true,\n            }}\n          />\n          <TextField\n            style={{marginLeft: \"10px\"}}\n            id=\"to\"\n            label=\"To\"\n            type=\"date\"\n            value={this.state.to}\n            onChange={this.handleInputChange}\n            name=\"to\"\n            InputLabelProps={{\n              shrink: true,\n            }}\n          />\n          <TextField\n            style={{marginLeft: \"10px\", minWidth: \"90px\"}}\n            id=\"blocked\"\n            select\n            label=\"Blocked?\"\n            value={this.state.blocked}\n            onChange={this.handleInputChange}\n            name=\"blocked\"\n            SelectProps={{\n              native: true\n            }}>\n            <option value=\"\"></option>\n            <option value=\"yes\">Yes</option>\n            <option value=\"no\">No</option>\n          </TextField>\n          <Button\n              style={{marginLeft: \"10px\"}}\n              variant=\"contained\"\n              onClick={this.handleSubmit}>\n            Filter\n          </Button>\n          <Button\n              style={{marginLeft: \"10px\"}}\n              variant=\"contained\"\n              onClick={this.handleClear}>\n            Clear\n          </Button>\n        </Grid>\n      </form>\n    );\n  }\n}\n\nexport default(PalletTableFilter);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport PalletTableFilter from './PalletTableFilter'\n\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    overflowX: 'auto',\n  },\n  table: {\n    minWidth: 400,\n  },\n  header: {\n    marginLeft: '10px',\n    marginTop: '10px'\n  }\n});\n\nfunction PalletTable(props) {\n  const { classes } = props;\n\n  return (\n    <Paper className={classes.root}>\n      <Typography className={classes.header} color=\"textSecondary\" variant=\"button\" gutterBottom>\n        Produced Pallets\n      </Typography>\n      <PalletTableFilter\n        cookies={props.cookies}\n        palletsFilter={props.palletsFilter} />\n      <Table className={classes.table}>\n        <TableHead>\n          <TableRow>\n            <TableCell>Name</TableCell>\n            <TableCell>Production date</TableCell>\n            <TableCell>Customer</TableCell>\n            <TableCell>Blocked</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {props.pallets.map(p => {\n            const customer = !p.customer || p.customer === 'null' ? '' : p.customer;\n            return (\n              <TableRow key={p.id}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {p.cookie}\n                </TableCell>\n                <TableCell>{p.production_date}</TableCell>\n                <TableCell>{customer}</TableCell>\n                <TableCell>{p.blocked}</TableCell>\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </Paper>\n  );\n}\n\nPalletTable.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(PalletTable);\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nclass ResetDatabase extends Component {\n  state = {\n    open: false\n  }\n\n  openDialog = () => {\n    this.setState({open: true})\n  }\n\n  closeDialog = () => {\n    this.setState({open: false})\n  }\n\n  resetDatabase = () => {\n    this.closeDialog();\n    axios.post('reset', {})\n      .then(response => {\n        console.log(response);\n        this.props.refresh();\n        this.props.setStatus(\"The database was restored\");\n      })\n      .catch(error => {\n        alert('An error occured. See console.');\n        console.log(error);\n      });\n  }\n\n  render() {\n    return (\n      <p>\n        <Button variant=\"contained\" onClick={this.openDialog}>\n          Reset database\n        </Button>\n        <Dialog\n          open={this.state.open}\n          onClose={this.closeDialog}\n          aria-labelledby=\"alert-dialog-title\"\n          aria-describedby=\"alert-dialog-description\">\n          <DialogTitle id=\"alert-dialog-title\">{\"Reset database?\"}</DialogTitle>\n          <DialogContent>\n            <DialogContentText id=\"alert-dialog-description\">\n              Do you want do reset the database?\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.resetDatabase} color=\"primary\">\n              Yes\n            </Button>\n            <Button onClick={this.closeDialog} color=\"primary\" autoFocus>\n              No\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </p>\n    );\n  }\n}\n\nexport default ResetDatabase;\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\n\nimport './App.css';\nimport PalletProduction from './PalletProduction';\nimport PalletTable from './PalletTable'\nimport ResetDatabase from './ResetDatabase';\n\nclass App extends Component {\n  state = {\n    cookies: [],\n    pallets: [],\n    palletsFilter: {},\n    disconnected: false,\n    cookieStatus: \"\",\n    palletStatus: \"\"\n  }\n\n  componentDidMount() {\n    this.refresh();\n  }\n\n  refresh = () => {\n    this.fetchCookies();\n    this.fetchPallets(this.state.palletsFilter);\n  }\n\n  fetchCookies = () => {\n    axios.get(\"cookies\")\n      .then(res => {\n        if (res.data && res.data.cookies) {\n          this.setState({ cookies: res.data.cookies, cookieStatus: (!res.data.cookies || res.data.cookies.length === 0) ? \"Cookie request success, but no cookies returned from API\": \"\"});\n        } else {\n          this.setState({ cookieStatus: \"Couldn't fetch cookies from REST server\"});\n        }\n      })\n      .catch(error => {\n        console.log(error);\n        this.setState({disconnected: true})\n      });\n  }\n\n  fetchPallets = (filter) => {\n    // Only apply filters that are non-empty\n    let params = {}\n    Object.keys(filter)\n      .filter(k => filter[k].length > 0)\n      .forEach(k => params[k] = filter[k])\n\n    axios.get(\"pallets\", {params: params})\n      .then(res => {\n        console.log(res);\n        if (res.data && res.data.pallets) {\n          this.setState({ pallets: res.data.pallets, palletStatus: (!res.data.pallets || res.data.pallets.length === 0) ? \"Pallet request success, but no pallets returned from API.\": \"\" });\n        } else {\n          this.setState({ palletStatus: \"Couldn't fetch pallets from REST server\"});\n        }\n      })\n      .catch(error => {\n        console.log(error);\n        this.setState({disconnected: true})\n      });\n  }\n\n  setStatus = (message) => {\n    this.setState({status: message});\n  }\n\n  setPalletsFilter = (filter) => {\n    this.setState({palletsFilter: filter});\n    this.fetchPallets(filter);\n  }\n\n  mainArea = () => (\n    <div>\n      <PalletProduction\n        cookies={this.state.cookies}\n        refresh={this.refresh}\n        setStatus={this.setStatus} />\n      <PalletTable\n        cookies={this.state.cookies}\n        pallets={this.state.pallets}\n        palletsFilter={this.setPalletsFilter} />\n      <ResetDatabase\n        refresh={this.refresh}\n        setStatus={this.setStatus} />\n    </div>\n  )\n\n  render() {\n    let statusMessage = [this.state.cookieStatus, this.state.palletStatus].join(\" - \");\n    if (this.state.disconnected) {\n      statusMessage = (\n        <b>Disconnected. Couldn't connect to REST server ({axios.defaults.baseURL})</b>\n      )\n    }\n\n    let main = null;\n    if (!this.state.disconnected) {\n      main = this.mainArea();\n    }\n\n    return (\n      <div className=\"App\">\n        <Typography variant=\"h3\" gutterBottom>\n          Krusty\n        </Typography>\n\n        <Paper className={this.props.classes.StatusPaper}>\n          <div>\n            <b>Status:</b> {statusMessage}\n          </div>\n        </Paper>\n\n        {main}\n      </div>\n    );\n  }\n\n}\n\nconst styles = theme => ({\n  StatusPaper: {\n    padding: \"10px\",\n    marginBottom: \"15px\"\n  }\n});\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles'\nimport theme from './theme';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport axios from 'axios';\n\naxios.defaults.baseURL = '/api/v1';\n\nReactDOM.render(\n<ThemeProvider theme={theme}>\n    {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n    <CssBaseline />\n    <App />\n  </ThemeProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}